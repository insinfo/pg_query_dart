import 'package:pg_query/pg_query.dart';

void main() {
  final scanner = PgQuery.fromPath('pg_query.dll');

  List<String> tests = [
    "SELECT 1",
    "SELECT \\s 1",
    "SELECT * FROM x WHERE z = 2",
    "SELECT 5.41414",
    r"SELECT $1",
    "SELECT ?",
    "SELECT update AS left /* comment */ FROM between",
    "--test\nSELECT 1",
    "SELECT 999999999999999999999::numeric/1000000000000000000000",
    "SELECT 4790999999999999999999999999999999999999999999999999999999999999999999999999999999999999 * 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
    "WITH upsert AS (INSERT INTO schema_columns (table_id, name, position, data_type, default_value, not_null, first_snapshot_idtable_id, name) WHERE invalidated_at_snapshot_id IS NULL DO UPDATE SET (position, data_type, default_value, not_null) = (EXCLUDED.position, EXCLUDED.data_type, EXCLUDED.default_value, EXCLUDED.not_null) RETURNING id, table_id, name), all_ids AS (SELECT id FROM upsert), cleanup AS (UPDATE schema_columns SET invalidated_at_snapshot_id = ? WHERE table_id = ? AND invalidated_at_snapshot_id IS NULL AND id NOT IN (SELECT id FROM all_ids)) SELECT * FROM upsert",
    r'''SELECT $foo$test$foo$, '123' FROM \"xy\", abc''',
    "SELECT '/*not a comment*/', E'\\134', B'10', X'12', -Infinity, U&\"d!0061t!+000061\" UESCAPE '!', U&'d!0061t!+000061' UESCAPE '!'"
  ];

  try {
    // Faz o scan de todas as consultas
    for (int i = 0; i < tests.length; i++) {
      var resp = scanner.scan(tests[i]);
      printf("%s\n", [tests[i]]);
      if (resp.error != null) {
        print('error: ${resp.error!.message} at ${resp.error!.cursorPosition}');
      } else {
        for (int j = 0; j < resp.result!.tokens.length; j++) {
          var scanToken = resp.result!.tokens[j];
          var tokenKind = scanToken.token;
          var keywordKind = scanToken.keywordKind;
          var tokenString = tests[i].substring(scanToken.start, scanToken.end);
          printf("  \"%s\" = [ %d, %d, %s, %s ]\n", [
            tokenString,
            scanToken.start,
            scanToken.end,
            tokenKind.name,
            keywordKind.name
          ]);
        }
      }
    }
  } catch (e) {
    print('Error occurred: $e');
  } finally {
    scanner.exit();
  }
}

void printf(String format, List<Object> args) {
  String formattedString = format; 
  for (var i = 0; i < args.length; i++) {
    formattedString = formattedString.replaceFirst('%s', args[i].toString());
    formattedString = formattedString.replaceFirst('%d', args[i].toString());
  }
  print(formattedString);
}
